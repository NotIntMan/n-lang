pub struct PersonSex {
    is_male: boolean,
}

pub struct PersonInfo {
    age: unsigned tiny integer,
    sex: PersonSex,
}

table Users {
    #[primary_key]
    #[auto_increment]
    id: unsigned integer,
    person_info: PersonInfo,
}

fn user_age(user: Users::entity): unsigned tiny integer {
    return user.person_info.age;
}

fn get_max_user_age(): small integer {
    let t := select max(user_age(u)) from Users u;
    return t.component0;
}

fn add_user(person_info: PersonInfo): PersonInfo {
    insert into Users u (u.person_info) values (person_info);
    return person_info;
}

fn new_person_info(age: unsigned tiny integer): PersonInfo {
    let result: PersonInfo;
    result.age := age;
    return result;
}

fn old_all_users(increment: unsigned tiny integer) {
    update Users u set u.person_info.age = user_age(u) + 1;
}

fn user_info(user: Users::entity): PersonInfo {
    return user.person_info;
}

fn max_of_ages(a: Users::entity, b: Users::entity): unsigned tiny integer {
    let info_a := user_info(a);
    if info_a.age > user_info(b).age {
        return user_age(a);
    } else {
        return user_age(b);
    }
}

fn sum(a: small integer, b: small integer): small integer {
    return a + b;
}

fn fibo(n: small integer): small integer {
    let a: small integer := 1;
    let b: small integer := 1;
    let i: small integer := 1;
    while n > i {
        i := i + 1;
        let t := a;
        a := b;
        b := b + t;
    };
    do {
        i := i + 1;
        let t := a;
        a := b;
        b := b + t;
    } while n > i;
    loop {
        i := i + 1;
    };
    return a;
}

fn wrong() {
    let a := select * from Users u;
    let b := select * from a join Users us;
    let c := 2 + 2 + 2;
    let d := select max(a.u.person_info.age) from a;
    let e := d.component0;
    let f := sum(5, 10);
    {
        let info: PersonInfo;
        info.age := 18;
        info.sex.is_male := true;
        let g := add_user(info);
    }
}

fn delete_user(id: unsigned integer) {
    delete from Users u where u.id = id;
}
